name: Deploy to Cloud Run

on:
  workflow_call:
    inputs:
      flavor:
        type: string
        required: true
        description: 'The flavor to deploy (canary, beta)'
  workflow_dispatch:
    inputs:
      flavor:
        type: choice
        required: true
        description: 'The flavor to deploy'
        options:
          - canary
          - beta

permissions:
  contents: 'read'
  id-token: 'write'

jobs:
  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "RELEASE_FLAVOR=${{ inputs.flavor }}" >> "$GITHUB_ENV"
          echo "GCP_PROJECT=learnify-463605" >> "$GITHUB_ENV"
          echo "ARTIFACT_REGISTRY_REPO=learnify-docker-repo" >> "$GITHUB_ENV"
          echo "SERVICE_NAME=learnify-${{ inputs.flavor }}" >> "$GITHUB_ENV"

          # 根据不同 flavor 设置对应的区域和存储桶
          if [ "${{ inputs.flavor }}" = "canary" ]; then
            echo "GCP_REGION=asia-east2" >> "$GITHUB_ENV"
            echo "STORAGE_BUCKET=learnify_canary_storage" >> "$GITHUB_ENV"
            echo "CONFIG_BUCKET=learnify_canary_config" >> "$GITHUB_ENV"
          else
            echo "GCP_REGION=australia-southeast2" >> "$GITHUB_ENV"
            echo "STORAGE_BUCKET=learnify_beta_storage" >> "$GITHUB_ENV"
            echo "CONFIG_BUCKET=learnify_beta_config" >> "$GITHUB_ENV"
          fi

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug GCP credentials
        run: |
          if [ -z "${{ secrets.GCP_SA_KEY }}" ]; then
            echo "❌ GCP_SA_KEY is empty or not set"
            echo "GCP_SA_KEY length: 0"
          else
            echo "✅ GCP_SA_KEY is available"
            echo "GCP_SA_KEY length: $(echo '${{ secrets.GCP_SA_KEY }}' | wc -c)"
            echo "GCP_SA_KEY starts with: $(echo '${{ secrets.GCP_SA_KEY }}' | head -c 20)..."
            echo "GCP_SA_KEY ends with: ...$(echo '${{ secrets.GCP_SA_KEY }}' | tail -c 20)"
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: |
          # Artifact Registry 总是在 australia-southeast2
          gcloud auth configure-docker australia-southeast2-docker.pkg.dev

      - name: Verify Artifact Registry repository exists
        run: |
          # Artifact Registry 总是在 australia-southeast2
          gcloud artifacts repositories describe ${{ env.ARTIFACT_REGISTRY_REPO }} \
            --location=australia-southeast2 \
            --project=${{ env.GCP_PROJECT }}

      - name: Pull and retag image from GHCR to Artifact Registry
        run: |
          # 定义镜像路径 - Artifact Registry 总是在 australia-southeast2
          GHCR_IMAGE="ghcr.io/a1exsun/learnify-graphql:${{ env.RELEASE_FLAVOR }}"
          AR_IMAGE="australia-southeast2-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.ARTIFACT_REGISTRY_REPO }}/learnify-graphql:${{ env.RELEASE_FLAVOR }}"

          echo "Pulling image from GHCR: $GHCR_IMAGE"
          docker pull $GHCR_IMAGE

          echo "Tagging image for Artifact Registry: $AR_IMAGE"
          docker tag $GHCR_IMAGE $AR_IMAGE

          echo "Pushing image to Artifact Registry: $AR_IMAGE"
          docker push $AR_IMAGE

          echo "AR_IMAGE=$AR_IMAGE" >> "$GITHUB_ENV"

      - name: Deploy to Cloud Run
        run: |
          # 根据 flavor 设置对应的 secrets
          if [ "${{ env.RELEASE_FLAVOR }}" = "canary" ]; then
            SECRET_PREFIX="LEARNIFY_CANARY"
          else
            SECRET_PREFIX="LEARNIFY_BETA"
          fi

          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.AR_IMAGE }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT }} \
            --platform=managed \
            --port=3010 \
            --memory=2Gi \
            --cpu=1 \
            --min-instances=1 \
            --max-instances=1 \
            --concurrency=80 \
            --timeout=300 \
            --cpu-boost \
            --service-account=ghcr-sync@learnify-463605.iam.gserviceaccount.com \
            --set-env-vars="AFFINE_SERVER_PORT=3010,REDIS_SERVER_PORT=6379,REDIS_SERVER_TLS=true,REDIS_SERVER_DATABASE=0,AFFINE_INDEXER_ENABLED=false,AFFINE_SERVER_HTTPS=true" \
            --set-secrets="REDIS_SERVER_HOST=${SECRET_PREFIX}_REDIS_HOST:latest,REDIS_SERVER_USERNAME=${SECRET_PREFIX}_REDIS_USERNAME:latest,REDIS_SERVER_PASSWORD=${SECRET_PREFIX}_REDIS_PASSWORD:latest,DATABASE_URL=${SECRET_PREFIX}_DB_URL:latest,AFFINE_SERVER_HOST=${SECRET_PREFIX}_SERVER_URL:latest,AFFINE_SERVER_EXTERNAL_URL=${SECRET_PREFIX}_SERVER_URL:latest" \
            --add-volume=name=${{ env.STORAGE_BUCKET }},type=cloud-storage,bucket=${{ env.STORAGE_BUCKET }} \
            --add-volume=name=${{ env.CONFIG_BUCKET }},type=cloud-storage,bucket=${{ env.CONFIG_BUCKET }} \
            --add-volume-mount=volume=${{ env.STORAGE_BUCKET }},mount-path=/root/.affine/storage \
            --add-volume-mount=volume=${{ env.CONFIG_BUCKET }},mount-path=/root/.affine/config \
            --allow-unauthenticated

      - name: Verify deployment
        run: |
          echo "Deployment completed! Service URL:"
          gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region=${{ env.GCP_REGION }} \
            --project=${{ env.GCP_PROJECT }} \
            --format="value(status.url)"

      - name: Cleanup local images
        run: |
          docker rmi ghcr.io/a1exsun/learnify-graphql:${{ env.RELEASE_FLAVOR }} || true
          docker rmi ${{ env.AR_IMAGE }} || true
